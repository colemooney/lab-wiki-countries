{"version":3,"sources":["Details.js","App.js","serviceWorker.js","index.js"],"names":["Details","findCountry","id","countries","find","theCountry","cca3","flag","getBorders","borders","map","eachBorder","i","country","_this","react_default","a","createElement","key","react_router_dom","to","concat","name","common","this","props","match","params","nation","className","official","style","width","capital","Component","App","showCountries","eachCountry","react","react_router","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qh7bAIqBA,6MAEjBC,YAAc,SAACC,GACX,OAAOC,EAAUC,KAAK,SAACC,GACnB,OAAOA,EAAWC,OAASJ,GAAMG,EAAWE,OAASL,OAI7DM,WAAa,SAACC,GACV,OAAOA,EAAQC,IAAI,SAACC,EAAYC,GAC5B,IAAIC,EAAUC,EAAKb,YAAYU,EAAYC,GAC3C,OACAG,EAAAC,EAAAC,cAAA,MAAIC,IAAKN,GACLG,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAE,mBAAAC,OAAqBV,IACxBE,EAAQN,KAAMM,EAAQS,KAAKC,oFAQxC,IAAIrB,EAAKsB,KAAKC,MAAMC,MAAMC,OAAOzB,GAC7B0B,EAASJ,KAAKvB,YAAYC,GAG9B,OACIa,EAAAC,EAAAC,cAAA,OAAKY,UAAU,SACfd,EAAAC,EAAAC,cAAA,UAAKW,EAAON,KAAKQ,SAAjB,IAA4BF,EAAOrB,MACnCQ,EAAAC,EAAAC,cAAA,SAAOY,UAAU,SACfd,EAAAC,EAAAC,cAAA,cACAF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIc,MAAO,CAACC,MAAO,QAAnB,WACAjB,EAAAC,EAAAC,cAAA,UAAKW,EAAOK,UAEdlB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,sBACEF,EAAAC,EAAAC,cAAA,kBAGJF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACGO,KAAKhB,WAAWoB,EAAOnB,sBA9CTyB,aCkCtBC,oNA5BbC,cAAgB,WAOd,OANmBjC,EAAUO,IAAI,SAAC2B,EAAazB,GAC7C,OAAQG,EAAAC,EAAAC,cAAA,MAAIC,IAAKN,EAAGiB,UAAU,0CAC5Bd,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAE,mBAAAC,OAAsBgB,EAAY9B,OAAS8B,EAAYf,KAAKC,OAApE,IAA6Ec,EAAY9B,kFAQ/F,OACEQ,EAAAC,EAAAC,cAACqB,EAAA,SAAD,KACAvB,EAAAC,EAAAC,cAAA,OAAKY,UAAU,OACbd,EAAAC,EAAAC,cAAA,OAAKY,UAAU,SAAf,OAECL,KAAKY,iBAERrB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,KACExB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,sBAAsBC,UAAW1C,cArBvCkC,cCEES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASpB,MACvB,2DCLNqB,IAASC,OACLjC,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACIJ,EAAAC,EAAAC,cAACgC,EAAD,OAEJC,SAASC,eAAe,SD0GtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c67b964c.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport countries from './countries.json'\nimport { Link } from 'react-router-dom'\n\nexport default class Details extends Component {\n\n    findCountry = (id) =>{\n        return countries.find((theCountry)=>{\n            return theCountry.cca3 === id || theCountry.flag === id\n        })\n    }\n\n    getBorders = (borders) =>{\n        return borders.map((eachBorder, i)=>{\n            let country = this.findCountry(eachBorder, i);\n            return (\n            <li key={i}>\n                <Link to={`/country-detail/${eachBorder}`}>\n                    {country.flag}{country.name.common}\n                </Link>\n            </li>\n            )\n        })\n    }\n\n    render() {\n        let id = this.props.match.params.id\n        let nation = this.findCountry(id)\n     \n\n        return (\n            <div className=\"col-7\">\n            <h1>{nation.name.official} {nation.flag}</h1>\n            <table className=\"table\">\n              <thead></thead>\n              <tbody>\n                <tr>\n                  <td style={{width: \"30%\"}}>Capital</td>\n                  <td>{nation.capital}</td>\n                </tr>\n                <tr>\n                  <td>Area</td>\n                  <td>551695 km\n                    <sup>2</sup>\n                  </td>\n                </tr>\n                <tr>\n                  <td>Borders</td>\n                  <td>\n                    <ul>\n                      {this.getBorders(nation.borders)}\n                    </ul>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        )\n    }\n}\n","import React, {Component, Fragment} from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Details from './Details'\nimport countries from './countries.json'\nimport { Link } from 'react-router-dom'\n\nimport './App.css';\n\nclass App extends Component{\n\n  showCountries = () =>{\n    let allCountries = countries.map((eachCountry, i) =>{\n      return (<li key={i} className=\"list-group-item list-group-item-action\">\n        <Link to ={`/country-detail/${eachCountry.flag}`}>{eachCountry.name.common} {eachCountry.flag}</Link>\n      </li>\n      )\n    })\n    return allCountries\n  }\n\n  render(){\n  return (\n    <Fragment>\n    <div className=\"row\">\n      <div className=\"col-5\">\n      List\n      {this.showCountries()}\n      </div>\n    <Switch>\n      <Route exact path='/country-detail/:id' component={Details}/>\n    </Switch>\n    </div>\n\n\n    </Fragment>\n  );\n}\n}\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// src/index.js\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}